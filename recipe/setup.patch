diff --git a/wrappers/Python/setup.py b/wrappers/Python/setup.py
index 5c339c09..7a3e2a24 100644
--- a/wrappers/Python/setup.py
+++ b/wrappers/Python/setup.py
@@ -48,48 +48,6 @@ def recursive_collect_includes():
 
 
 if __name__ == '__main__':
-
-    # #Handling the standard library for C++ on OSX
-    #
-    # This is mostly related to the compiler version, but since it is much
-    # easier to check the OSX version, we are may also use that as an
-    # indicator. OSX 10.14 and XCode 10 completely dropped support for
-    # libstdc++ which forces is to manipulate the minimum OSX target
-    # version when compiling the Cython extensions.
-    if sys.platform == 'darwin':
-        osx_target = LooseVersion(get_config_var('MACOSX_DEPLOYMENT_TARGET'))
-        osx_compiler = LooseVersion('0.0')
-        osx_version = LooseVersion('0.0')
-        FORCE_TARGET = None
-        USE_OSX_VERSION = False
-        if USE_OSX_VERSION:
-            osx_version = LooseVersion(platform.mac_ver()[0])
-            print("OSX build detected, targetting {0} on {1}.".format(osx_target, osx_version))
-        else:
-            import subprocess
-            cmd = subprocess.Popen(r'gcc --version | grep clang | grep -o -E "(\d+\.)+\d+" | uniq | sort', shell=True, stdout=subprocess.PIPE)
-            for line in cmd.stdout:
-                # print(line)
-                try: line = line.decode()
-                except AttributeError: pass
-                line = line.strip()
-                try:
-                    osx_compiler = LooseVersion(line)
-                    if osx_compiler > "1.0" and osx_compiler < "100.0": break
-                except BaseException as be:
-                    print('Error getting OSX compile version: ', str(be))
-                    pass
-            print("OSX build detected, targetting {0} using clang/gcc v{1}.".format(osx_target, osx_compiler))
-
-        # allow to override things manually
-        if 'MACOSX_DEPLOYMENT_TARGET' not in os.environ:
-            if osx_version >= "10.14":
-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = "10.9"
-                print("Assuming that we cannot build for {0} on {1}, resetting target to {2}".format(osx_target, osx_version, os.environ['MACOSX_DEPLOYMENT_TARGET']))
-            if osx_compiler >= "10":
-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = "10.9"
-                print("Assuming that we cannot build for {0} using clang/gcc {1}, resetting target to {2}".format(osx_target, osx_compiler, os.environ['MACOSX_DEPLOYMENT_TARGET']))
-
     # ******************************
     #       CMAKE OPTIONS
     # ******************************
@@ -208,6 +166,9 @@ if __name__ == '__main__':
                 cmake_config_args += ['-DFORCE_BITNESS_64=ON']
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
+        elif cmake_compiler == 'nmake':
+            cmake_build_args = ['--config', '"Release"']
+            cmake_config_args += ['-G', '"NMake Makefiles"']
         elif cmake_compiler == 'default':
             cmake_config_args = []
             if sys.platform.startswith('win'):
@@ -218,7 +179,7 @@ if __name__ == '__main__':
                 cmake_config_args += ['-DFORCE_BITNESS_64=ON']
             elif cmake_bitness == 'NATIVE':
                 cmake_config_args += ['-DFORCE_BITNESS_NATIVE=ON']
-            elif cmake_bitness == 'any':
+            elif cmake_bitness in ['any', 'arm64']:
                 pass
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
@@ -256,7 +217,7 @@ if __name__ == '__main__':
 
         # Now find the static library that we just built
         static_libs = []
-        for search_suffix in ['Release/*.lib', 'Release/*.a', 'Debug/*.lib', 'Debug/*.a', '*.a']:
+        for search_suffix in ['Release/*.lib', 'Release/*.a', 'Debug/*.lib', 'Debug/*.a', '*.a', '*.lib']:
             static_libs += glob.glob(os.path.join(cmake_build_dir, search_suffix))
 
         if len(static_libs) != 1:
