From dcf6f58473cba4c3f4da0c14e3928a05d407338a Mon Sep 17 00:00:00 2001
From: Jan Janssen <jan-janssen@users.noreply.github.com>
Date: Fri, 30 May 2025 11:38:32 +0200
Subject: [PATCH] Update setup.py

---
 wrappers/Python/setup.py | 52 ++++++----------------------------------
 1 file changed, 7 insertions(+), 45 deletions(-)

diff --git a/wrappers/Python/setup.py b/wrappers/Python/setup.py
index 4eb13023e..c795af83d 100644
--- a/wrappers/Python/setup.py
+++ b/wrappers/Python/setup.py
@@ -26,7 +26,7 @@ def copy2(old, new):
     for jsonfile in glob.glob(os.path.join('CoolProp', 'include', '*_JSON_z.h')):
         print('removing', jsonfile)
         os.remove(jsonfile)
-    copytree(os.path.join(CProot, 'externals/fmtlib/include/fmt'), os.path.join('CoolProp', 'include', 'fmt'))  # Should be deprecated
+    copytree(os.path.join(os.environ['PREFIX'], 'Library', 'include', 'fmt') if os.name == 'nt' else os.path.join(os.environ['PREFIX'], 'include', 'fmt'), os.path.join('CoolProp', 'include', 'fmt'))  # Should be deprecated
     #copytree(os.path.join(CProot, 'externals/fmtlib/include/fmt'), os.path.join('CoolProp','include','fmt'))
     copy2(os.path.join(CProot, 'CoolPropBibTeXLibrary.bib'), os.path.join('CoolProp', 'CoolPropBibTeXLibrary.bib'))
     
@@ -61,47 +61,6 @@ def recursive_collect_includes():
 
 if __name__ == '__main__':
 
-    # #Handling the standard library for C++ on OSX
-    #
-    # This is mostly related to the compiler version, but since it is much
-    # easier to check the OSX version, we are may also use that as an
-    # indicator. OSX 10.14 and XCode 10 completely dropped support for
-    # libstdc++ which forces is to manipulate the minimum OSX target
-    # version when compiling the Cython extensions.
-    if sys.platform == 'darwin':
-        osx_target = Version(get_config_var('MACOSX_DEPLOYMENT_TARGET'))
-        osx_compiler = Version('0.0')
-        osx_version = Version('0.0')
-        FORCE_TARGET = None
-        USE_OSX_VERSION = False
-        if USE_OSX_VERSION:
-            osx_version = Version(platform.mac_ver()[0])
-            print("OSX build detected, targetting {0} on {1}.".format(osx_target, osx_version))
-        else:
-            import subprocess
-            cmd = subprocess.Popen(r'gcc --version | grep clang | grep -o -E "(\d+\.)+\d+" | uniq | sort', shell=True, stdout=subprocess.PIPE)
-            for line in cmd.stdout:
-                # print(line)
-                try: line = line.decode()
-                except AttributeError: pass
-                line = line.strip()
-                try:
-                    osx_compiler = Version(line)
-                    if osx_compiler > "1.0" and osx_compiler < "100.0": break
-                except BaseException as be:
-                    print('Error getting OSX compile version: ', str(be))
-                    pass
-            print("OSX build detected, targetting {0} using clang/gcc v{1}.".format(osx_target, osx_compiler))
-
-        # allow to override things manually
-        if 'MACOSX_DEPLOYMENT_TARGET' not in os.environ:
-            if osx_version >= Version("10.14"):
-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = "10.9"
-                print("Assuming that we cannot build for {0} on {1}, resetting target to {2}".format(osx_target, osx_version, os.environ['MACOSX_DEPLOYMENT_TARGET']))
-            if osx_compiler >= Version("10"):
-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = "10.9"
-                print("Assuming that we cannot build for {0} using clang/gcc {1}, resetting target to {2}".format(osx_target, osx_compiler, os.environ['MACOSX_DEPLOYMENT_TARGET']))
-
     # ******************************
     #       CMAKE OPTIONS
     # ******************************
@@ -220,6 +179,9 @@ def recursive_collect_includes():
                 cmake_config_args += ['-DFORCE_BITNESS_64=ON']
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
+        elif cmake_compiler == 'nmake':
+            cmake_build_args = ['--config', '"Release"']
+            cmake_config_args += ['-G', '"NMake Makefiles"']
         elif cmake_compiler == 'default':
             cmake_config_args = []
             if sys.platform.startswith('win'):
@@ -230,7 +192,7 @@ def recursive_collect_includes():
                 cmake_config_args += ['-DFORCE_BITNESS_64=ON']
             elif cmake_bitness == 'NATIVE':
                 cmake_config_args += ['-DFORCE_BITNESS_NATIVE=ON']
-            elif cmake_bitness == 'any':
+            elif cmake_bitness in ['any', 'arm64']:
                 pass
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
@@ -268,7 +230,7 @@ def recursive_collect_includes():
 
         # Now find the static library that we just built
         static_libs = []
-        for search_suffix in ['Release/*.lib', 'Release/*.a', 'Debug/*.lib', 'Debug/*.a', '*.a']:
+        for search_suffix in ['Release/*.lib', 'Release/*.a', 'Debug/*.lib', 'Debug/*.a', '*.a', '*.lib']:
             static_libs += glob.glob(os.path.join(cmake_build_dir, search_suffix))
 
         if len(static_libs) != 1:
@@ -433,7 +395,7 @@ def find_cpp_sources(root=os.path.join('..', '..', 'src'), extensions=['.cpp'],
         os.path.join(CProot, 'include'),
         os.path.join(CProot, 'src'),
         os.path.join(CProot, 'dev'),
-        os.path.join(CProot, 'externals', 'Eigen'),
+        os.path.join(os.environ['PREFIX'], 'Library', 'include', 'eigen3') if os.name == 'nt' else os.path.join(os.environ['PREFIX'], 'include', 'eigen3'),
         # os.path.join(CProot, 'externals', 'fmtlib'),  # should be deprecated
         os.path.join(CProot, 'externals', 'fmtlib', 'include'),
         os.path.join(CProot, 'boost_CoolProp'),
