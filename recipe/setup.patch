--- a/wrappers/Python/setup.py
+++ b/wrappers/Python/setup.py
@@ -1,6 +1,6 @@
 from __future__ import print_function
 import platform
-import subprocess, shutil, os, sys, glob, tempfile
+import subprocess, shlex, shutil, os, sys, glob, tempfile
 from distutils.version import LooseVersion
 from distutils.sysconfig import get_config_var
 from setuptools.command.build_ext import build_ext
@@ -48,47 +48,6 @@
 
 if __name__ == '__main__':
 
-    # #Handling the standard library for C++ on OSX
-    #
-    # This is mostly related to the compiler version, but since it is much
-    # easier to check the OSX version, we are may also use that as an
-    # indicator. OSX 10.14 and XCode 10 completely dropped support for
-    # libstdc++ which forces is to manipulate the minimum OSX target
-    # version when compiling the Cython extensions.
-    if sys.platform == 'darwin':
-        osx_target = LooseVersion(get_config_var('MACOSX_DEPLOYMENT_TARGET'))
-        osx_compiler = LooseVersion('0.0')
-        osx_version = LooseVersion('0.0')
-        FORCE_TARGET = None
-        USE_OSX_VERSION = False
-        if USE_OSX_VERSION:
-            osx_version = LooseVersion(platform.mac_ver()[0])
-            print("OSX build detected, targetting {0} on {1}.".format(osx_target, osx_version))
-        else:
-            import subprocess
-            cmd = subprocess.Popen('gcc --version | grep clang | grep -o -E "(\d+\.)+\d+" | uniq | sort', shell=True, stdout=subprocess.PIPE)
-            for line in cmd.stdout:
-                # print(line)
-                try: line = line.decode()
-                except AttributeError: pass
-                line = line.strip()
-                try:
-                    osx_compiler = LooseVersion(line)
-                    if osx_compiler > "1.0" and osx_compiler < "100.0": break
-                except BaseException as be:
-                    print('Error getting OSX compile version: ', str(be))
-                    pass
-            print("OSX build detected, targetting {0} using clang/gcc v{1}.".format(osx_target, osx_compiler))
-
-        # allow to override things manually
-        if 'MACOSX_DEPLOYMENT_TARGET' not in os.environ:
-            if osx_version >= "10.14":
-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = "10.9"
-                print("Assuming that we cannot build for {0} on {1}, resetting target to {2}".format(osx_target, osx_version, os.environ['MACOSX_DEPLOYMENT_TARGET']))
-            if osx_compiler >= "10":
-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = "10.9"
-                print("Assuming that we cannot build for {0} using clang/gcc {1}, resetting target to {2}".format(osx_target, osx_compiler, os.environ['MACOSX_DEPLOYMENT_TARGET']))
-
     # ******************************
     #       CMAKE OPTIONS
     # ******************************
@@ -142,7 +101,7 @@
             if cmake_bitness == '32':
                 cmake_config_args += ['-G', '"Visual Studio 9 2008"']
             elif cmake_bitness == '64':
-                cmake_config_args += ['-G', '"Visual Studio 9 2008 Win64"']
+                cmake_config_args += ['-G', '"NMake Makefiles"']
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
         elif cmake_compiler == 'vc10':
@@ -150,7 +109,7 @@
             if cmake_bitness == '32':
                 cmake_config_args += ['-G', '"Visual Studio 10 2010"']
             elif cmake_bitness == '64':
-                cmake_config_args += ['-G', '"Visual Studio 10 2010 Win64"']
+                cmake_config_args += ['-G', '"NMake Makefiles"']
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
         elif cmake_compiler == 'vc14':
@@ -158,7 +117,7 @@
             if cmake_bitness == '32':
                 cmake_config_args += ['-G', '"Visual Studio 14 2015"']
             elif cmake_bitness == '64':
-                cmake_config_args += ['-G', '"Visual Studio 14 2015 Win64"']
+                cmake_config_args += ['-G', '"NMake Makefiles"']
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
         elif cmake_compiler == 'vc15':
@@ -166,7 +125,7 @@
             if cmake_bitness == '32':
                 cmake_config_args += ['-G', '"Visual Studio 15 2017"']
             elif cmake_bitness == '64':
-                cmake_config_args += ['-G', '"Visual Studio 15 2017 Win64"']
+                cmake_config_args += ['-G', '"NMake Makefiles"']
             else:
                 raise ValueError('cmake_bitness must be either 32 or 64; got ' + cmake_bitness)
         elif cmake_compiler == 'mingw':
@@ -183,7 +142,7 @@
                 cmake_build_args = ['--config', '"Release"']
             if cmake_bitness == '32':
                 cmake_config_args += ['-DFORCE_BITNESS_32=ON']
-            elif cmake_bitness == '64':
+            elif cmake_bitness in ['64', 'arm64']:
                 cmake_config_args += ['-DFORCE_BITNESS_64=ON']
             elif cmake_bitness == 'any':
                 pass
@@ -209,11 +168,11 @@
         if not os.path.exists(cmake_build_dir):
             os.makedirs(cmake_build_dir)
 
-        cmake_call_string = ' '.join(['cmake', '../../../..', '-DCOOLPROP_STATIC_LIBRARY=ON', '-DCMAKE_VERBOSE_MAKEFILE=ON', '-DCMAKE_BUILD_TYPE=Release'] + cmake_config_args)
+        cmake_call_string = ' '.join(['cmake', '../../../..', '-DCOOLPROP_STATIC_LIBRARY=ON', '-DCMAKE_VERBOSE_MAKEFILE=ON', '-DCMAKE_BUILD_TYPE=Release'] + cmake_config_args + shlex.split(os.environ.get("CMAKE_ARGS", "")))
         print('calling: ' + cmake_call_string)
         subprocess.check_call(cmake_call_string, shell=True, stdout=sys.stdout, stderr=sys.stderr, cwd=cmake_build_dir)
 
-        cmake_build_string = ' '.join(['cmake', '--build', '.'] + cmake_build_args)
+        cmake_build_string = ' '.join(['cmake', '--build', '.'] + cmake_build_args)  # shlex.split(os.environ.get("CMAKE_ARGS", "")))
         print('calling: ' + cmake_build_string)
         subprocess.check_call(cmake_build_string, shell=True, stdout=sys.stdout, stderr=sys.stderr, cwd=cmake_build_dir)
 
@@ -215,7 +174,7 @@
 
         # Now find the static library that we just built
         static_libs = []
-        for search_suffix in ['Release/*.lib', 'Release/*.a', 'Debug/*.lib', 'Debug/*.a', '*.a']:
+        for search_suffix in ['Release/*.lib', 'Release/*.a', 'Debug/*.lib', 'Debug/*.a', '*.a', '*.lib']:
             static_libs += glob.glob(os.path.join(cmake_build_dir, search_suffix))
 
         if len(static_libs) != 1:
